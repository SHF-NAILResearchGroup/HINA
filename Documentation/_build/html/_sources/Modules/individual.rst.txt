Individual
++++++++++++

Tutorial
========

The `Individual` module provides functions to compute node-level measures for analyzing the quantity and diversity of individuals' interactions in the learning process. These measures quantify how frequently individuals engage in tasks and the diversity of their engagement patterns.

New package contributions can incorporate other node-level measures for understanding individualsâ€™ participation patterns.

Currently, the module contains the `quantity_diversity.py` file, which includes:

- `get_bipartite`: Constructs a bipartite network projection from a dataset.
- `quantity_and_diversity`: Computes measures of interaction quantity and diversity for individuals.

Inputs include:

- **df**: A pandas DataFrame containing individual interactions.
- **student_col**: The column name representing individuals (students).
- **task_col**: The column name representing tasks.
- **weight_col**: The column name representing task weights.

Outputs include:

- **Quantity**: A dictionary mapping individuals to their total weighted participation in tasks.
- **Diversity**: A dictionary mapping individuals to their diversity score based on the entropy of their task distribution.

Individual
==========

This module provides functions for computing node-level measures related to participation in learning networks.

.. list-table:: Functions
   :header-rows: 1

   * - Function
     - Description
   * - `get_bipartite(df, col1, col2) <#get-bipartite>`_
     - Constructs a bipartite network from dataset columns.
   * - `quantity_and_diversity(df, student_col, task_col, weight_col) <#quantity-and-diversity>`_
     - Computes node-level measures of interaction quantity and diversity.

Reference
---------

.. _get-bipartite:

.. raw:: html

   <div id="get-bipartite" class="function-header">
       <span class="class-name">function</span> <span class="function-name">get_bipartite(df, col1, col2)</span> 
       <a href="../Code/quantity_diversity.html#get-bipartite" class="source-link">[source]</a>
   </div>

**Description**:
Constructs a bipartite network projection from dataset columns.

**Parameters**:

.. raw:: html

   <div class="parameter-block">
       (df, col1, col2)
   </div>

   <ul class="parameter-list">
       <li><span class="param-name">df</span>: A pandas DataFrame containing interaction records.</li>
       <li><span class="param-name">col1</span>: The column name representing one set of nodes (e.g., individuals).</li>
       <li><span class="param-name">col2</span>: The column name representing the second set of nodes (e.g., tasks). If a tuple of column names is provided, attributes will be merged into a composite index.</li>
   </ul>

**Returns**:
  - **set**: A set of tuples `(i, j, w)`, where `i` and `j` are node labels, and `w` is the edge weight (interaction frequency).

.. _quantity-and-diversity:

.. raw:: html

   <div id="quantity-and-diversity" class="function-header">
       <span class="class-name">function</span> <span class="function-name">quantity_and_diversity(df, student_col, task_col, weight_col)</span> 
       <a href="../Code/quantity_diversity.html#quantity-and-diversity" class="source-link">[source]</a>
   </div>

**Description**:
Computes node-level measures of interaction quantity and diversity.

**Parameters**:

.. raw:: html

   <div class="parameter-block">
       (df, student_col, task_col, weight_col)
   </div>

   <ul class="parameter-list">
       <li><span class="param-name">df</span>: A pandas DataFrame containing interaction records.</li>
       <li><span class="param-name">student_col</span>: The column name representing individuals.</li>
       <li><span class="param-name">task_col</span>: The column name representing tasks.</li>
       <li><span class="param-name">weight_col</span>: The column name representing interaction weights.</li>
   </ul>

**Returns**:
  - **tuple**: Two dictionaries:
    - **quantities**: `{node: quantity}` mapping individuals to their total weighted participation.
    - **diversities**: `{node: diversity}` mapping individuals to their diversity score (entropy of task distribution).

Demo
====

Example Code
------------

This example demonstrates how to use the `quantity_and_diversity` function to compute node-level measures.

**Step 1: Import necessary libraries**

.. code-block:: python

    import pandas as pd
    from hina.individual.quantity_diversity import get_bipartite, quantity_and_diversity

**Step 2: Define the dataset**

A dataset containing student-task interactions:

.. code-block:: python

    data = {
        'student': ['A', 'B', 'A', 'C'],
        'task': ['X', 'Y', 'X', 'Z'],
        'weight': [1, 2, 1, 3]
    }
    df = pd.DataFrame(data)

**Step 3: Construct the bipartite network**

We create a bipartite network representation of the interactions.

.. code-block:: python

    bipartite_graph = get_bipartite(df, 'student', 'task')
    print("Bipartite Network:", bipartite_graph)

**Step 4: Compute quantity and diversity measures**

Calculate the participation quantity and diversity for each student.

.. code-block:: python

    quantities, diversities = quantity_and_diversity(df, 'student', 'task', 'weight')

    print("Quantities:", quantities)
    print("Diversities:", diversities)

**Step 5: Handle composite task attributes**

If tasks are defined using multiple attributes, we can merge them into a composite index.

.. code-block:: python

    data = {
        'student': ['A', 'B', 'A', 'C'],
        'task1': ['X', 'Y', 'X', 'Z'],
        'task2': [1, 2, 1, 3],
        'weight': [1, 2, 1, 3]
    }
    df = pd.DataFrame(data)
    df['task'] = list(zip(df['task1'], df['task2']))

    quantities, diversities = quantity_and_diversity(df, 'student', 'task', 'weight')

    print("Quantities (Composite Task):", quantities)
    print("Diversities (Composite Task):", diversities)

Example Output
--------------

.. code-block:: console

    Bipartite Network: {('A', 'X', 2), ('B', 'Y', 1), ('C', 'Z', 1)}
    Quantities: {'A': 0.5, 'B': 0.3333, 'C': 0.5}
    Diversities: {'A': 0.0, 'B': 0.0, 'C': 0.0}

    Quantities (Composite Task): {'A': 0.5, 'B': 0.3333, 'C': 0.5}
    Diversities (Composite Task): {'A': 0.0, 'B': 0.0, 'C': 0.0}

Paper Source
============

If you use this function in your work, please cite:

