Mesoscale
++++++++++++

Tutorial
========

The `Mesoscale` module provides methods for clustering nodes in a bipartite projection of a heterogeneous interaction network based on shared interaction structure. It automatically learns the number of clusters from the heterogeneity in the interaction data to find a mesoscale representation.

New package contributions can incorporate other algorithms for understanding the mesoscale structure of interaction networks.

Currently, the module contains the `clustering.py` file, which includes:

- `cluster_nodes`: Computes node clusters in a bipartite network.
- `bipartite_communities`: Identifies communities in a bipartite network by optimizing a Minimum Description Length (MDL) objective.

Inputs include:

- **G**: A bipartite network represented as a set of tuples.
- **num_clusters**: The number of clusters (optional, if `None`, the algorithm determines it automatically).
- **method**: Specifies the clustering objective (`'modularity'`, `'SBM'`).
- **nodes**: Specifies the nodes to apply clustering to (`'All'` includes all nodes).

Outputs include:

- **Cluster labels**: A dictionary mapping nodes to their respective cluster labels.
- **Compression ratio**: The description length divided by the naive description length, indicating the effectiveness of the inferred communities.

Mesoscale
=========

This module provides methods for detecting mesoscale structures in bipartite interaction networks.

.. list-table:: Functions
   :header-rows: 1

   * - Function
     - Description
   * - `cluster_nodes(G, num_clusters=None, method='modularity', nodes='All') <#cluster-nodes>`_
     - Computes node clusters in a bipartite network.
   * - `bipartite_communities(G, fix_B=None) <#bipartite-communities>`_
     - Identifies bipartite communities by optimizing the MDL objective.

Reference
---------

.. _cluster-nodes:

.. raw:: html

   <div id="cluster-nodes" class="function-header">
       <span class="class-name">function</span> <span class="function-name">cluster_nodes(G, num_clusters=None, method='modularity', nodes='All')</span> 
       <a href="../Code/clustering.html#cluster-nodes" class="source-link">[source]</a>
   </div>

**Description**:
Computes node clusters in a bipartite network using different clustering objectives.

**Parameters**:

.. raw:: html

   <div class="parameter-block">
       (G, num_clusters=None, method='modularity', nodes='All')
   </div>

   <ul class="parameter-list">
       <li><span class="param-name">G</span>: A bipartite network represented as a set of tuples <code>(i, j)</code>, where <code>i</code> and <code>j</code> are nodes.</li>
       <li><span class="param-name">num_clusters</span>: Fixed number of clusters (optional). If <code>None</code>, the algorithm learns the number of clusters automatically.</li>
       <li><span class="param-name">method</span>: Specifies the clustering objective. Available options:
           <ul>
               <li><code>'modularity'</code>: Barber's (2007) modularity for bipartite graphs (sknetwork).</li>
               <li><code>'SBM'</code>: Peixoto's microcanonical SBM (2014) (graph-tool).</li>
           </ul>
       </li>
       <li><span class="param-name">nodes</span>: List of node names to apply clustering to. Default is <code>'All'</code> (includes all nodes).</li>
   </ul>

**Returns**:
  - **dict**: A dictionary mapping node names to cluster labels.

.. _bipartite-communities:

.. raw:: html

   <div id="bipartite-communities" class="function-header">
       <span class="class-name">function</span> <span class="function-name">bipartite_communities(G, fix_B=None)</span> 
       <a href="../Code/clustering.html#bipartite-communities" class="source-link">[source]</a>
   </div>

**Description**:
Optimizes an MDL objective to find bipartite communities in the network.

**Parameters**:

.. raw:: html

   <div class="parameter-block">
       (G, fix_B=None)
   </div>

   <ul class="parameter-list">
       <li><span class="param-name">G</span>: A weighted edge set represented as tuples <code>(i, j, w_ij)</code>, where <code>w_ij</code> is a positive integer.</li>
       <li><span class="param-name">fix_B</span>: Fixed number of clusters (optional). If <code>None</code>, the number of clusters is learned automatically.</li>
   </ul>

**Returns**:
  - **dict**: A dictionary mapping nodes to their respective community labels.
  - **float**: Compression ratio (description length divided by naive description length).

Demo
====

Example Code
------------

This example demonstrates how to use `cluster_nodes` and `bipartite_communities` for clustering nodes in a bipartite network.

**Step 1: Import necessary libraries**

.. code-block:: python

    from hina.mesoscale.clustering import cluster_nodes, bipartite_communities

**Step 2: Define the bipartite graph**

We define a bipartite graph with edges between two node sets.

.. code-block:: python

    G = [(1, 'a'), (1, 'b'), (2, 'a'), (3, 'c'), (4, 'd')]

**Step 3: Compute node clusters using modularity-based clustering**

We apply the modularity method for clustering nodes.

.. code-block:: python

    cluster_labels = cluster_nodes(G, method='modularity')
    print("Cluster Labels:", cluster_labels)

**Step 4: Compute bipartite communities using MDL optimization**

We identify communities in the bipartite network by minimizing the MDL objective.

.. code-block:: python

    G_weighted = [(1, 'a', 1), (1, 'b', 2), (2, 'a', 1), (3, 'c', 1), (4, 'd', 1)]
    community_labels, compression_ratio = bipartite_communities(G_weighted)

    print("Community Labels:", community_labels)
    print("Compression Ratio:", compression_ratio)

**Step 5: Apply clustering with a fixed number of clusters**

If desired, we can fix the number of clusters manually.

.. code-block:: python

    community_labels_fixed, compression_ratio_fixed = bipartite_communities(G_weighted, fix_B=2)

    print("Fixed Community Labels:", community_labels_fixed)
    print("Fixed Compression Ratio:", compression_ratio_fixed)

Example Output
--------------

.. code-block:: console

    Cluster Labels: {1: 0, 2: 0, 3: 1, 4: 2}
    Community Labels: {'1': '0', '2': '0', '3': '1', '4': '2'}
    Compression Ratio: 0.75

    Fixed Community Labels: {'1': '0', '2': '0', '3': '1', '4': '1'}
    Fixed Compression Ratio: 0.85

Paper Source
============

If you use this function in your work, please cite:

